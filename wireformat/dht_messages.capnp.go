// Code generated by capnpc-go. DO NOT EDIT.

package wireformat

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type StatusMask uint16

// StatusMask_TypeID is the unique identifier for the type StatusMask.
const StatusMask_TypeID = 0xbdb4350c2aab1ab8

// Values of StatusMask.
const (
	StatusMask_default  StatusMask = 0
	StatusMask_live     StatusMask = 1
	StatusMask_rejected StatusMask = 2
	StatusMask_deleted  StatusMask = 3
	StatusMask_modified StatusMask = 4
	StatusMask_any      StatusMask = 5
)

// String returns the enum's constant name.
func (c StatusMask) String() string {
	switch c {
	case StatusMask_default:
		return "default"
	case StatusMask_live:
		return "live"
	case StatusMask_rejected:
		return "rejected"
	case StatusMask_deleted:
		return "deleted"
	case StatusMask_modified:
		return "modified"
	case StatusMask_any:
		return "any"

	default:
		return ""
	}
}

// StatusMaskFromString returns the enum value with a name,
// or the zero value if there's no such value.
func StatusMaskFromString(c string) StatusMask {
	switch c {
	case "default":
		return StatusMask_default
	case "live":
		return StatusMask_live
	case "rejected":
		return StatusMask_rejected
	case "deleted":
		return StatusMask_deleted
	case "modified":
		return StatusMask_modified
	case "any":
		return StatusMask_any

	default:
		return 0
	}
}

type StatusMask_List struct{ capnp.List }

func NewStatusMask_List(s *capnp.Segment, sz int32) (StatusMask_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return StatusMask_List{l.List}, err
}

func (l StatusMask_List) At(i int) StatusMask {
	ul := capnp.UInt16List{List: l.List}
	return StatusMask(ul.At(i))
}

func (l StatusMask_List) Set(i int, v StatusMask) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type GetMask uint16

// GetMask_TypeID is the unique identifier for the type GetMask.
const GetMask_TypeID = 0xc377b357f02696ed

// Values of GetMask.
const (
	GetMask_default   GetMask = 0
	GetMask_entry     GetMask = 1
	GetMask_entryType GetMask = 2
	GetMask_sources   GetMask = 3
	GetMask_all       GetMask = 4
)

// String returns the enum's constant name.
func (c GetMask) String() string {
	switch c {
	case GetMask_default:
		return "default"
	case GetMask_entry:
		return "entry"
	case GetMask_entryType:
		return "entryType"
	case GetMask_sources:
		return "sources"
	case GetMask_all:
		return "all"

	default:
		return ""
	}
}

// GetMaskFromString returns the enum value with a name,
// or the zero value if there's no such value.
func GetMaskFromString(c string) GetMask {
	switch c {
	case "default":
		return GetMask_default
	case "entry":
		return GetMask_entry
	case "entryType":
		return GetMask_entryType
	case "sources":
		return GetMask_sources
	case "all":
		return GetMask_all

	default:
		return 0
	}
}

type GetMask_List struct{ capnp.List }

func NewGetMask_List(s *capnp.Segment, sz int32) (GetMask_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return GetMask_List{l.List}, err
}

func (l GetMask_List) At(i int) GetMask {
	ul := capnp.UInt16List{List: l.List}
	return GetMask(ul.At(i))
}

func (l GetMask_List) Set(i int, v GetMask) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type PutRequest struct{ capnp.Struct }

// PutRequest_TypeID is the unique identifier for the type PutRequest.
const PutRequest_TypeID = 0x9d995947600c58af

func NewPutRequest(s *capnp.Segment) (PutRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PutRequest{st}, err
}

func NewRootPutRequest(s *capnp.Segment) (PutRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PutRequest{st}, err
}

func ReadRootPutRequest(msg *capnp.Message) (PutRequest, error) {
	root, err := msg.RootPtr()
	return PutRequest{root.Struct()}, err
}

func (s PutRequest) String() string {
	str, _ := text.Marshal(0x9d995947600c58af, s.Struct)
	return str
}

func (s PutRequest) Hash() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s PutRequest) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PutRequest) HashBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s PutRequest) SetHash(v string) error {
	return s.Struct.SetText(0, v)
}

// PutRequest_List is a list of PutRequest.
type PutRequest_List struct{ capnp.List }

// NewPutRequest creates a new list of PutRequest.
func NewPutRequest_List(s *capnp.Segment, sz int32) (PutRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return PutRequest_List{l}, err
}

func (s PutRequest_List) At(i int) PutRequest { return PutRequest{s.List.Struct(i)} }

func (s PutRequest_List) Set(i int, v PutRequest) error { return s.List.SetStruct(i, v.Struct) }

// PutRequest_Promise is a wrapper for a PutRequest promised by a client call.
type PutRequest_Promise struct{ *capnp.Pipeline }

func (p PutRequest_Promise) Struct() (PutRequest, error) {
	s, err := p.Pipeline.Struct()
	return PutRequest{s}, err
}

type GetRequest struct{ capnp.Struct }

// GetRequest_TypeID is the unique identifier for the type GetRequest.
const GetRequest_TypeID = 0x93b6bc720f276f9b

func NewGetRequest(s *capnp.Segment) (GetRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GetRequest{st}, err
}

func NewRootGetRequest(s *capnp.Segment) (GetRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GetRequest{st}, err
}

func ReadRootGetRequest(msg *capnp.Message) (GetRequest, error) {
	root, err := msg.RootPtr()
	return GetRequest{root.Struct()}, err
}

func (s GetRequest) String() string {
	str, _ := text.Marshal(0x93b6bc720f276f9b, s.Struct)
	return str
}

func (s GetRequest) Hash() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s GetRequest) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s GetRequest) HashBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s GetRequest) SetHash(v string) error {
	return s.Struct.SetText(0, v)
}

func (s GetRequest) StatusMask() StatusMask {
	return StatusMask(s.Struct.Uint16(0))
}

func (s GetRequest) SetStatusMask(v StatusMask) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s GetRequest) GetMask() GetMask {
	return GetMask(s.Struct.Uint16(2))
}

func (s GetRequest) SetGetMask(v GetMask) {
	s.Struct.SetUint16(2, uint16(v))
}

// GetRequest_List is a list of GetRequest.
type GetRequest_List struct{ capnp.List }

// NewGetRequest creates a new list of GetRequest.
func NewGetRequest_List(s *capnp.Segment, sz int32) (GetRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return GetRequest_List{l}, err
}

func (s GetRequest_List) At(i int) GetRequest { return GetRequest{s.List.Struct(i)} }

func (s GetRequest_List) Set(i int, v GetRequest) error { return s.List.SetStruct(i, v.Struct) }

// GetRequest_Promise is a wrapper for a GetRequest promised by a client call.
type GetRequest_Promise struct{ *capnp.Pipeline }

func (p GetRequest_Promise) Struct() (GetRequest, error) {
	s, err := p.Pipeline.Struct()
	return GetRequest{s}, err
}

type GetResponse struct{ capnp.Struct }

// GetResponse_TypeID is the unique identifier for the type GetResponse.
const GetResponse_TypeID = 0xcac162d7b2eb6fe5

func NewGetResponse(s *capnp.Segment) (GetResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return GetResponse{st}, err
}

func NewRootGetResponse(s *capnp.Segment) (GetResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return GetResponse{st}, err
}

func ReadRootGetResponse(msg *capnp.Message) (GetResponse, error) {
	root, err := msg.RootPtr()
	return GetResponse{root.Struct()}, err
}

func (s GetResponse) String() string {
	str, _ := text.Marshal(0xcac162d7b2eb6fe5, s.Struct)
	return str
}

func (s GetResponse) Entry() (Entry, error) {
	p, err := s.Struct.Ptr(0)
	return Entry{Struct: p.Struct()}, err
}

func (s GetResponse) HasEntry() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s GetResponse) SetEntry(v Entry) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewEntry sets the entry field to a newly
// allocated Entry struct, preferring placement in s's segment.
func (s GetResponse) NewEntry() (Entry, error) {
	ss, err := NewEntry(s.Struct.Segment())
	if err != nil {
		return Entry{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s GetResponse) Sources() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.TextList{List: p.List()}, err
}

func (s GetResponse) HasSources() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s GetResponse) SetSources(v capnp.TextList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewSources sets the sources field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s GetResponse) NewSources(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s GetResponse) FollowHash() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s GetResponse) HasFollowHash() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s GetResponse) FollowHashBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s GetResponse) SetFollowHash(v string) error {
	return s.Struct.SetText(2, v)
}

// GetResponse_List is a list of GetResponse.
type GetResponse_List struct{ capnp.List }

// NewGetResponse creates a new list of GetResponse.
func NewGetResponse_List(s *capnp.Segment, sz int32) (GetResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return GetResponse_List{l}, err
}

func (s GetResponse_List) At(i int) GetResponse { return GetResponse{s.List.Struct(i)} }

func (s GetResponse_List) Set(i int, v GetResponse) error { return s.List.SetStruct(i, v.Struct) }

// GetResponse_Promise is a wrapper for a GetResponse promised by a client call.
type GetResponse_Promise struct{ *capnp.Pipeline }

func (p GetResponse_Promise) Struct() (GetResponse, error) {
	s, err := p.Pipeline.Struct()
	return GetResponse{s}, err
}

func (p GetResponse_Promise) Entry() Entry_Promise {
	return Entry_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type DelRequest struct{ capnp.Struct }

// DelRequest_TypeID is the unique identifier for the type DelRequest.
const DelRequest_TypeID = 0xa2befdc7b6557656

func NewDelRequest(s *capnp.Segment) (DelRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return DelRequest{st}, err
}

func NewRootDelRequest(s *capnp.Segment) (DelRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return DelRequest{st}, err
}

func ReadRootDelRequest(msg *capnp.Message) (DelRequest, error) {
	root, err := msg.RootPtr()
	return DelRequest{root.Struct()}, err
}

func (s DelRequest) String() string {
	str, _ := text.Marshal(0xa2befdc7b6557656, s.Struct)
	return str
}

func (s DelRequest) Hash() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s DelRequest) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s DelRequest) HashBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s DelRequest) SetHash(v string) error {
	return s.Struct.SetText(0, v)
}

func (s DelRequest) By() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s DelRequest) HasBy() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s DelRequest) ByBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s DelRequest) SetBy(v string) error {
	return s.Struct.SetText(1, v)
}

// DelRequest_List is a list of DelRequest.
type DelRequest_List struct{ capnp.List }

// NewDelRequest creates a new list of DelRequest.
func NewDelRequest_List(s *capnp.Segment, sz int32) (DelRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return DelRequest_List{l}, err
}

func (s DelRequest_List) At(i int) DelRequest { return DelRequest{s.List.Struct(i)} }

func (s DelRequest_List) Set(i int, v DelRequest) error { return s.List.SetStruct(i, v.Struct) }

// DelRequest_Promise is a wrapper for a DelRequest promised by a client call.
type DelRequest_Promise struct{ *capnp.Pipeline }

func (p DelRequest_Promise) Struct() (DelRequest, error) {
	s, err := p.Pipeline.Struct()
	return DelRequest{s}, err
}

type ModRequest struct{ capnp.Struct }

// ModRequest_TypeID is the unique identifier for the type ModRequest.
const ModRequest_TypeID = 0xeb3783c426dc146e

func NewModRequest(s *capnp.Segment) (ModRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ModRequest{st}, err
}

func NewRootModRequest(s *capnp.Segment) (ModRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ModRequest{st}, err
}

func ReadRootModRequest(msg *capnp.Message) (ModRequest, error) {
	root, err := msg.RootPtr()
	return ModRequest{root.Struct()}, err
}

func (s ModRequest) String() string {
	str, _ := text.Marshal(0xeb3783c426dc146e, s.Struct)
	return str
}

func (s ModRequest) OldHash() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ModRequest) HasOldHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ModRequest) OldHashBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ModRequest) SetOldHash(v string) error {
	return s.Struct.SetText(0, v)
}

func (s ModRequest) NewHash() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s ModRequest) HasNewHash() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ModRequest) NewHashBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s ModRequest) SetNewHash(v string) error {
	return s.Struct.SetText(1, v)
}

// ModRequest_List is a list of ModRequest.
type ModRequest_List struct{ capnp.List }

// NewModRequest creates a new list of ModRequest.
func NewModRequest_List(s *capnp.Segment, sz int32) (ModRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return ModRequest_List{l}, err
}

func (s ModRequest_List) At(i int) ModRequest { return ModRequest{s.List.Struct(i)} }

func (s ModRequest_List) Set(i int, v ModRequest) error { return s.List.SetStruct(i, v.Struct) }

// ModRequest_Promise is a wrapper for a ModRequest promised by a client call.
type ModRequest_Promise struct{ *capnp.Pipeline }

func (p ModRequest_Promise) Struct() (ModRequest, error) {
	s, err := p.Pipeline.Struct()
	return ModRequest{s}, err
}

type LinkRequest struct{ capnp.Struct }

// LinkRequest_TypeID is the unique identifier for the type LinkRequest.
const LinkRequest_TypeID = 0x958ef5cea5ecc6e9

func NewLinkRequest(s *capnp.Segment) (LinkRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return LinkRequest{st}, err
}

func NewRootLinkRequest(s *capnp.Segment) (LinkRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return LinkRequest{st}, err
}

func ReadRootLinkRequest(msg *capnp.Message) (LinkRequest, error) {
	root, err := msg.RootPtr()
	return LinkRequest{root.Struct()}, err
}

func (s LinkRequest) String() string {
	str, _ := text.Marshal(0x958ef5cea5ecc6e9, s.Struct)
	return str
}

func (s LinkRequest) Base() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s LinkRequest) HasBase() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s LinkRequest) BaseBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s LinkRequest) SetBase(v string) error {
	return s.Struct.SetText(0, v)
}

func (s LinkRequest) Links() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s LinkRequest) HasLinks() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s LinkRequest) LinksBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s LinkRequest) SetLinks(v string) error {
	return s.Struct.SetText(1, v)
}

// LinkRequest_List is a list of LinkRequest.
type LinkRequest_List struct{ capnp.List }

// NewLinkRequest creates a new list of LinkRequest.
func NewLinkRequest_List(s *capnp.Segment, sz int32) (LinkRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return LinkRequest_List{l}, err
}

func (s LinkRequest_List) At(i int) LinkRequest { return LinkRequest{s.List.Struct(i)} }

func (s LinkRequest_List) Set(i int, v LinkRequest) error { return s.List.SetStruct(i, v.Struct) }

// LinkRequest_Promise is a wrapper for a LinkRequest promised by a client call.
type LinkRequest_Promise struct{ *capnp.Pipeline }

func (p LinkRequest_Promise) Struct() (LinkRequest, error) {
	s, err := p.Pipeline.Struct()
	return LinkRequest{s}, err
}

type DelLinkRequest struct{ capnp.Struct }

// DelLinkRequest_TypeID is the unique identifier for the type DelLinkRequest.
const DelLinkRequest_TypeID = 0x9dd7de3fe76da752

func NewDelLinkRequest(s *capnp.Segment) (DelLinkRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return DelLinkRequest{st}, err
}

func NewRootDelLinkRequest(s *capnp.Segment) (DelLinkRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return DelLinkRequest{st}, err
}

func ReadRootDelLinkRequest(msg *capnp.Message) (DelLinkRequest, error) {
	root, err := msg.RootPtr()
	return DelLinkRequest{root.Struct()}, err
}

func (s DelLinkRequest) String() string {
	str, _ := text.Marshal(0x9dd7de3fe76da752, s.Struct)
	return str
}

func (s DelLinkRequest) Base() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s DelLinkRequest) HasBase() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s DelLinkRequest) BaseBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s DelLinkRequest) SetBase(v string) error {
	return s.Struct.SetText(0, v)
}

func (s DelLinkRequest) Link() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s DelLinkRequest) HasLink() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s DelLinkRequest) LinkBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s DelLinkRequest) SetLink(v string) error {
	return s.Struct.SetText(1, v)
}

func (s DelLinkRequest) Tag() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s DelLinkRequest) HasTag() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s DelLinkRequest) TagBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s DelLinkRequest) SetTag(v string) error {
	return s.Struct.SetText(2, v)
}

// DelLinkRequest_List is a list of DelLinkRequest.
type DelLinkRequest_List struct{ capnp.List }

// NewDelLinkRequest creates a new list of DelLinkRequest.
func NewDelLinkRequest_List(s *capnp.Segment, sz int32) (DelLinkRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return DelLinkRequest_List{l}, err
}

func (s DelLinkRequest_List) At(i int) DelLinkRequest { return DelLinkRequest{s.List.Struct(i)} }

func (s DelLinkRequest_List) Set(i int, v DelLinkRequest) error { return s.List.SetStruct(i, v.Struct) }

// DelLinkRequest_Promise is a wrapper for a DelLinkRequest promised by a client call.
type DelLinkRequest_Promise struct{ *capnp.Pipeline }

func (p DelLinkRequest_Promise) Struct() (DelLinkRequest, error) {
	s, err := p.Pipeline.Struct()
	return DelLinkRequest{s}, err
}

type LinkQuery struct{ capnp.Struct }

// LinkQuery_TypeID is the unique identifier for the type LinkQuery.
const LinkQuery_TypeID = 0xb62647acda819bb4

func NewLinkQuery(s *capnp.Segment) (LinkQuery, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return LinkQuery{st}, err
}

func NewRootLinkQuery(s *capnp.Segment) (LinkQuery, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return LinkQuery{st}, err
}

func ReadRootLinkQuery(msg *capnp.Message) (LinkQuery, error) {
	root, err := msg.RootPtr()
	return LinkQuery{root.Struct()}, err
}

func (s LinkQuery) String() string {
	str, _ := text.Marshal(0xb62647acda819bb4, s.Struct)
	return str
}

func (s LinkQuery) Base() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s LinkQuery) HasBase() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s LinkQuery) BaseBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s LinkQuery) SetBase(v string) error {
	return s.Struct.SetText(0, v)
}

func (s LinkQuery) Tag() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s LinkQuery) HasTag() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s LinkQuery) TagBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s LinkQuery) SetTag(v string) error {
	return s.Struct.SetText(1, v)
}

func (s LinkQuery) StatusMask() StatusMask {
	return StatusMask(s.Struct.Uint16(0))
}

func (s LinkQuery) SetStatusMask(v StatusMask) {
	s.Struct.SetUint16(0, uint16(v))
}

// LinkQuery_List is a list of LinkQuery.
type LinkQuery_List struct{ capnp.List }

// NewLinkQuery creates a new list of LinkQuery.
func NewLinkQuery_List(s *capnp.Segment, sz int32) (LinkQuery_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return LinkQuery_List{l}, err
}

func (s LinkQuery_List) At(i int) LinkQuery { return LinkQuery{s.List.Struct(i)} }

func (s LinkQuery_List) Set(i int, v LinkQuery) error { return s.List.SetStruct(i, v.Struct) }

// LinkQuery_Promise is a wrapper for a LinkQuery promised by a client call.
type LinkQuery_Promise struct{ *capnp.Pipeline }

func (p LinkQuery_Promise) Struct() (LinkQuery, error) {
	s, err := p.Pipeline.Struct()
	return LinkQuery{s}, err
}

const schema_f5d8b05955f7ad6f = "x\xda\x94\x94_h#U\x14\xc6\xcf\xb93\x93\xc9C" +
	"\xdc\xd9a\xf2\xa0\xfb\xd0\xb2\xc5v\xb5\xb0\xba\xdb5J" +
	"}\xd95\xec\xd2&4\x90\x1bw\xb5\xbb\xb8\xb8\xd3\xce" +
	"M\x93\xcdd&f&\x1b\xf2 A\x04\xdf\x14\x16\xa9" +
	"\"\xa5H\x85*\xe2\x9f\x8a\x96\xd2\x07\x15DQ\xf0\xc1" +
	"\xd7\xaa\x88 X\xa4\xd4\x82>\x14\x9fd\xe4\xce4\xc9" +
	"$\xa6&\xbe\x04\xee\xbd\xdf\xdc\xf3;\xdfwn\xcem" +
	"\x93K\xe4\xbc\xf4f\x14\x80\x1aR\xc4[\xb1\xcf(\xd5" +
	"O\xb7^\x05:\x82\xe8\xd9\x1f\xfcu\xed\xfaG\xdf\x1f" +
	"\x82\x842\xc0\x85\x84\x98F-%\xca\x00\xda\x15q\x03" +
	"\xd0\xdb\xfb\xfa\xf7\xf5\xef\x0e_Y\x06u$,&\\" +
	"\xfc\x8b\x98C\xed\xd0\x17\xff)\xd6\x01\xbd\x8d\xf9\xd8\xad" +
	"\x99\xebo\xac\xf6\x88\xfd\x9b3R\x1a5]\xe2\xe2\x9b" +
	"\xd2E@/\xf7N\xf9\xb7\x8b?\xef\xf4\x8a\x05.~" +
	"^\xba\x8d\xda]_\xfc\xb2\xc41\x9e\xbasm\xeb\x9b" +
	"\xbf?\x7f\xab\x1f\xc6x$\x8d\xdat\x84\x8b\x13\x11\x8e" +
	"\xb1\xb9\xf2\xc2\x8f\xef\xcfLl\xf5v\xe8\xab\xefF\x92" +
	"\xa8\xad\xf9\xea\xd5\x08\xbfz\xfb\xd4{\x93\xb1\xc4\xe6g" +
	"\xa0\x8e\x90\x8e\x18\xf0\xc2\xb4\x9cF-#seJ~" +
	"\x1d\xd0;xm\xe2\x8f\xa7?\xa9\x7f\xf9/\xe5\xb2<" +
	"\x85\xda\xba\xaf\\\x93\x9b\x80\xde\xae\xbd\xff\xf1\xce\xc2\x17" +
	"\xdf\xf6\xeb\xed\x079\x87\xda\x81/\xde\x939\x80\x15\xff" +
	"i\xe2\xab\x17\x1f\xdb\xef\xd7\xdbr4\x8d\xda\xbbQ." +
	"^\x8f\xd6\xe1m\xaf^\xac\xb2\xbc]-\x8b\xba\xfb\xb0" +
	"Qp\x9f-3\xc7\xd1\x97\x98\xf3\xd0\xa2^\xb1*\x8f" +
	"\xcf07\xc7\x9e\xab1\xc7\x05\xc8\"\xd2\x98 \x02\x88" +
	"\x08\xa0^\x99\x04\xa0\x97\x04\xa4s\x04\x11\xe3\xc8\xf7R" +
	"7\x00\xe8\xac\x80\xf4*A\x95`\x1c\x09\x80J\x93\x00" +
	"tN@:OP)\xe8N\x01c@0\x06\xe89" +
	"\xae\xee\xd6\x9c\x8c\x0e\x82SB\xa5c\x1c *\x80\xcd" +
	"%\xe6ft\xff\xa4mTp2\x08z\xaeh\x95\x02" +
	"jt9t\xb4\x0d\xfd \x87\xbe_@z\x8e\xa0\xda" +
	"\xa2>;\x05@\x1f\x10\x90>BPY\xd0\x1d\xd6\x02" +
	"\x1c5\x8bV\xc9i\xe3\x0e\xa8\x9a\xadu[%\xb6\xab" +
	"\xde\xc3\xabF\x05\xa4\xf1^\x07\x06\\y\x99\x99G\xbd" +
	"(\xfc\xde\xe3\x03h\xf7\x92\xe2\x9b\x97\x05\xa4Y\x9e\x00" +
	"\x09\x12\xc8\x8cub\xe9jP\xe1\x0d\xb6\x16\xb2\xab/" +
	"\xfd\x0f\xb0\xae^\x079|*\xe4p\xd8\x00a\xa11" +
	"lIn\x04\xad\xb1j\x03\x86\xb1a\xacc\x03\xb6\\" +
	"\xb8\x11\x9a\xc3\xb0\x0b]\x8d\xff\xf7L\x0e\x82|\xf2\xe8" +
	"k\xa7\x14\xf8r\xaf_\xf9\x89$\xff\\\x9d\x9e\x04@" +
	"\xa2\x9eO\x03\xa0\xa0\x9e\xe5\x9b\xa2:\xceW\x92zz" +
	"\x0c\xa0i\xb0\xbc^3]\xc5,\xdea^\x95\xddf" +
	"\x8b.3\xc0?0\x99\xcb\x0c\xafl\x1b\xc5|\xd1\xdf" +
	"\x93u\xab\xd1\xa6\x11\x8e{\xbc\xa3\xfe\x0b\xe2$\x81\x07" +
	"\x89\x80\x84O<\x12u<\xe7\x93\x9c\x0eH\xee\x0b!" +
	"\x8c2\xcb\xad6<\xff\xf7j\xa3\x02\xc8\x9a\x8e]\xab" +
	".2G\xd6Ms\xa8?\x0d\xa7b[\x0e\xb2\x9e\xb0" +
	"\xa6\xfa\x85\x95<\x0a\xebVhfo\xf2\xb4\x9e\x11\x90" +
	"\x16\x08\x064x\xd2\x9b\x7ft\xfb\xa53\xbb\x1f\xfe\xca" +
	"\x9b8\x09\xd8b\xc2\x13\x80Y\x01\xfd\x0cO\x00zy" +
	"\xdb4\xed\xfa,\xcfp\xe8\xa7\x96\xb1\x8d\xe3&:\xd9" +
	"o\xa2\x93\x9d\x89n\xda\xa61\x1b\x1a\xea\xa6\xc5\xea\xe1" +
	"\xf5?\x01\x00\x00\xff\xff)\x19\xd9\x96"

func init() {
	schemas.Register(schema_f5d8b05955f7ad6f,
		0x93b6bc720f276f9b,
		0x958ef5cea5ecc6e9,
		0x9d995947600c58af,
		0x9dd7de3fe76da752,
		0xa2befdc7b6557656,
		0xb62647acda819bb4,
		0xbdb4350c2aab1ab8,
		0xc377b357f02696ed,
		0xcac162d7b2eb6fe5,
		0xeb3783c426dc146e)
}
